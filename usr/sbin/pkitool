#!/bin/sh

. /opt/etc/openssl/vars

if [ -z "${SSLVARS}" ] ; then
    echo "Variables not loaded..."
    exit 1
fi

#  OpenVPN -- An application to securely tunnel IP networks
#             over a single TCP/UDP port, with support for SSL/TLS-based
#             session authentication and key exchange,
#             packet encryption, packet authentication, and
#             packet compression.
#
#  Copyright (C) 2002-2010 OpenVPN Technologies, Inc. <sales@openvpn.net>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program (see the file COPYING included with this
#  distribution); if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# pkitool is a front-end for the openssl tool.

# Calling scripts can set the certificate organizational 
# unit with the KEY_OU environmental variable. 

# Calling scripts can also set the KEY_NAME environmental
# variable to set the "name" X509 subject field.

PROGNAME=pkitool
VERSION=2.0

need_vars()
{
    echo '  Please edit the vars script to reflect your configuration,'
    echo '  then source it with "source ./vars".'
    echo '  Next, to start with a fresh PKI configuration and to delete any'
    echo '  previous certificates and keys, run "./clean-all".'
    echo "  Finally, you can run this tool ($PROGNAME) to build certificates/keys."
}

usage()
{
    echo "$PROGNAME $VERSION"
    echo "Usage: $PROGNAME [options...] [common-name]"
    echo "Options:"
    echo "  --batch    : batch mode (default)"
    echo "  --keysize  : Set keysize"
    echo "      size   : size (default=1024)"
    echo "  --interact : interactive mode"
    echo "  --server   : build server cert"
    echo "  --initca   : build root CA"
    echo "  --cader    : Convert the public CA certificate to DER format"
    echo "  --inter    : build intermediate CA"
    echo "  --pass     : encrypt private key with password"
    echo "  --csr      : only generate a CSR, do not sign"
    echo "  --sign     : sign an existing CSR"
    echo "  --pkcs12   : generate a combined PKCS#12 file"
    echo "  --pkcs11   : generate certificate on PKCS#11 token"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "      id     : PKCS#11 object id (hex string)"
    echo "      label  : PKCS#11 object label"
    echo "Standalone options:"
    echo "  --pkcs11-slots   : list PKCS#11 slots"
    echo "      lib    : PKCS#11 library"
    echo "  --pkcs11-objects : list PKCS#11 token objects"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "  --pkcs11-init    : initialize PKCS#11 token DANGEROUS!!!"
    echo "      lib    : PKCS#11 library"
    echo "      slot   : PKCS#11 slot"
    echo "      label  : PKCS#11 token label"
    echo "Notes:"
    need_vars
    echo "  In order to use PKCS#11 interface you must have opensc-0.10.0 or higher."
    echo "Generated files and corresponding OpenVPN directives:"
    echo '(Files will be placed in the $KEY_DIR directory, defined in ./vars)'
    echo "  ca.crt     -> root certificate (--ca)"
    echo "  ca.key     -> root key, keep secure (not directly used by OpenVPN)"
    echo "  .crt files -> client/server certificates (--cert)"
    echo "  .key files -> private keys, keep secure (--key)"
    echo "  .csr files -> certificate signing request (not directly used by OpenVPN)"
    echo "  dh1024.pem or dh2048.pem -> Diffie Hellman parameters (--dh)"
    echo "Examples:"
    echo "  $PROGNAME --initca          -> Build root certificate"
    echo "  $PROGNAME --initca --pass   -> Build root certificate with password-protected key"
    echo "  $PROGNAME --server server1  -> Build \"server1\" certificate/key"
    echo "  $PROGNAME client1           -> Build \"client1\" certificate/key"
    echo "  $PROGNAME --pass client2    -> Build password-protected \"client2\" certificate/key"
    echo "  $PROGNAME --pkcs12 client3  -> Build \"client3\" certificate/key in PKCS#12 format"
    echo "  $PROGNAME --csr client4     -> Build \"client4\" CSR to be signed by another CA"
    echo "  $PROGNAME --sign client4    -> Sign \"client4\" CSR"
    echo "  $PROGNAME --inter interca   -> Build an intermediate key-signing certificate/key"
    echo "                               Also see ./inherit-inter script."
    echo "  $PROGNAME --pkcs11 /usr/lib/pkcs11/lib1 0 010203 \"client5 id\" client5"
    echo "                              -> Build \"client5\" certificate/key in PKCS#11 token"
    echo "Typical usage for initial PKI setup.  Build myserver, client1, and client2 cert/keys."
    echo "Protect client2 key with a password.  Build DH parms.  Generated files in ./keys :"
    echo "  [edit vars with your site-specific info]"
    echo "  source ./vars"
    echo "  ./clean-all"
    echo "  ./build-dh     -> takes a long time, consider backgrounding"
    echo "  ./$PROGNAME --initca"
    echo "  ./$PROGNAME --server myserver"
    echo "  ./$PROGNAME client1"
    echo "  ./$PROGNAME --pass client2"
    echo "Typical usage for adding client cert to existing PKI:"
    echo "  source ./vars"
    echo "  ./$PROGNAME client-new"
}

# Set tool defaults
[ -n "$OPENSSL" ] || export OPENSSL="openssl"
[ -n "$PKCS11TOOL" ] || export PKCS11TOOL="pkcs11-tool"
[ -n "$GREP" ] || export GREP="grep"

# Set defaults
CA_DER="0"
DO_REQ="1"
REQ_EXT=""
DO_CA="1"
CA_EXT=""
DO_P12="0"
DO_P11="0"
DO_ROOT="0"
NODES_REQ="-nodes"
NODES_P12=""
BATCH="-batch"
CA="ca"
# must be set or errors of openssl.cnf
PKCS11_MODULE_PATH="dummy"
PKCS11_PIN="dummy"

# Process options
while [ $# -gt 0 ]; do
    case "$1" in
        --keysize  ) KEY_SIZE=$2
                     shift;;
        --server   ) REQ_EXT="$REQ_EXT -extensions server"
                     CA_EXT="$CA_EXT -extensions server" ;;
        --batch    ) BATCH="-batch" ;;
        --interact ) BATCH="" ;;
        --inter    ) CA_EXT="$CA_EXT -extensions v3_ca" ;;
        --initca   ) DO_ROOT="1" ;;
        --pass     ) NODES_REQ="" ;;
        --csr      ) DO_CA="0" ;;
        --sign     ) DO_REQ="0" ;;
        --cader    ) CA_DER="1" && DO_CA="0" && DO_REQ="0" ;;
        --pkcs12   ) DO_P12="1" ;;
        --pkcs11   ) DO_P11="1"
                     PKCS11_MODULE_PATH="$2"
                     PKCS11_SLOT="$3"
                     PKCS11_ID="$4"
                     PKCS11_LABEL="$5"
                     shift 4;;

        # standalone
        --pkcs11-init)
                     PKCS11_MODULE_PATH="$2"
                     PKCS11_SLOT="$3"
                     PKCS11_LABEL="$4"
                     if [ -z "$PKCS11_LABEL" ]; then
                       die "Please specify library name, slot and label"
                     fi
                     $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --init-token --slot "$PKCS11_SLOT" \
                        --label "$PKCS11_LABEL" &&
                        $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --init-pin --slot "$PKCS11_SLOT"
                     exit $?;;
        --pkcs11-slots)
                     PKCS11_MODULE_PATH="$2"
                     if [ -z "$PKCS11_MODULE_PATH" ]; then
                       die "Please specify library name"
                     fi
                     $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --list-slots
                     exit 0;;
        --pkcs11-objects)
                     PKCS11_MODULE_PATH="$2"
                     PKCS11_SLOT="$3"
                     if [ -z "$PKCS11_SLOT" ]; then
                       die "Please specify library name and slot"
                     fi
                     $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --list-objects --login --slot "$PKCS11_SLOT"
                     exit 0;;

        --help|--usage)
                    usage
                    exit ;;
        --version)
                    echo "$PROGNAME $VERSION"
                    exit ;;
        # errors
        --*        ) die "$PROGNAME: unknown option: $1" ;;
        *          ) break ;;
    esac
    shift   
done

if ! [ -z "$BATCH" ]; then
        if $OPENSSL version | grep 0.9.6 > /dev/null; then
                die "Batch mode is unsupported in openssl<0.9.7"
        fi
fi

if [ $DO_P12 -eq 1 -a $DO_P11 -eq 1 ]; then
        die "PKCS#11 and PKCS#12 cannot be specified together"
fi

if [ $DO_P11 -eq 1 ]; then
        if ! grep "^pkcs11.*=" "$KEY_CONFIG" > /dev/null; then
                die "Please edit $KEY_CONFIG and setup PKCS#11 engine"
        fi
fi

# If we are generating pkcs12, only encrypt the final step
if [ $DO_P12 -eq 1 ]; then
    NODES_P12="$NODES_REQ"
    NODES_REQ="-nodes"
fi

if [ $DO_P11 -eq 1 ]; then
        if [ -z "$PKCS11_LABEL" ]; then
                die "PKCS#11 arguments incomplete"
        fi
fi

# If undefined, set default key expiration intervals
if [ -z "$KEY_EXPIRE" ]; then
    KEY_EXPIRE=3650
fi
if [ -z "$CA_EXPIRE" ]; then
    CA_EXPIRE=3650
fi

# Set organizational unit to empty string if undefined
if [ -z "$KEY_OU" ]; then
    KEY_OU=""
fi

# Set X509 Name string to empty string if undefined
if [ -z "$KEY_NAME" ]; then
    KEY_NAME=""
fi

# Set KEY_CN, FN
if [ $DO_ROOT -eq 1 ]; then
    if [ -z "$KEY_CN" ]; then
        if [ -n "$1" ]; then
            KEY_CN="$1"
        elif [ "$KEY_ORG" ]; then
            KEY_CN="$KEY_ORG CA"
        fi
    fi
    if [ -n "$BATCH" ] && [ -n "$KEY_CN" ]; then
        echo "Using CA Common Name:" "$KEY_CN"
    fi
    FN="$KEY_CN"
elif [ -n "$BATCH" ] && [ -n "$KEY_CN" ]; then
    echo "Using Common Name:" "$KEY_CN"
    FN="$KEY_CN"
    if [ -n "$1" ]; then
        FN="$1"
    fi
elif [ $CA_DER -eq 1 ] ; then
    echo "Convert ca cert to der format."
else

    if [ $# -eq 1 ] ; then
        echo "Using $1 as common name..."
        KEY_CN="$1"
        shift
    fi

    if [ $# -gt 0 ]; then
        usage
        exit 1
    fi

    FN="$KEY_CN"

fi

if [ -z "${FN}" -o "${FN}" = "changeme" -o "${FN}" = "changeme CA" ] ; then
    echo -n "Enter commonName: "
    read KEY_CN
    FN=$KEY_CN
fi

if [ -z "${FN}" ] ; then
    die "Need a common name to use for the filename... aborting..."
fi

CERTIFICATE_FILE="${KEY_DIR}/${FN}.crt"
PRIVATE_KEY_FILE="${PRIVATE_KEY_DIR}/${FN}.key"
CERTIFICATE_REQ_FILE="${REQ_DIR}/${FN}.csr"

export CA_EXPIRE KEY_EXPIRE KEY_OU KEY_NAME KEY_CN PKCS11_MODULE_PATH PKCS11_PIN CERTIFICATE_FILE PRIVATE_KEY_FILE CERTIFICATE_REQ_FILE

# Show parameters (debugging)
if [ -n "$DEBUG" ] ; then
cat <<SHOWDEBUG
        SSLROOT               $SSLROOT
        KEY_CONFIG            $KEY_CONFIG
        CA_KEY_CONFIG         $CA_KEY_CONFIG
        CERTIFICATE_FILE      $CERTIFICATE_FILE
        PRIVATE_KEY_FILE      $PRIVATE_KEY_FILE
        CERTIFICATE_REQ_FILE  $CERTIFICATE_REQ_FILE
        DO_REQ                $DO_REQ
        REQ_EXT               $REQ_EXT
        DO_CA                 $DO_CA
        CA_EXT                $CA_EXT
        CA_DER                $CA_DER
        NODES_REQ             $NODES_REQ
        NODES_P12             $NODES_P12
        DO_P12                $DO_P12
        KEY_CN                $KEY_CN
        FN                    $FN
        BATCH                 $BATCH
        DO_ROOT               $DO_ROOT
        KEY_EXPIRE            $KEY_EXPIRE
        CA_EXPIRE             $CA_EXPIRE
        KEY_OU                $KEY_OU
        KEY_NAME              $KEY_NAME
        DO_P11                $DO_P11
        PKCS11_MODULE_PATH    $PKCS11_MODULE_PATH
        PKCS11_SLOT           $PKCS11_SLOT
        PKCS11_ID             $PKCS11_ID
        PKCS11_LABEL          $PKCS11_LABEL
SHOWDEBUG

fi

# Make sure ./vars was sourced beforehand
if [ -d "$SSLROOT" ] && [ -r "$KEY_CONFIG" ]; then

    cd $SSLROOT

#   # Make sure $KEY_CONFIG points to the correct version
#   # of openssl.cnf
#   if $GREP -i 'easy-rsa version 2\.[0-9]' "$KEY_CONFIG" >/dev/null; then
#       :
#   else
#       echo "$PROGNAME: KEY_CONFIG (set by the ./vars script) is pointing to the wrong"
#       echo "version of openssl.cnf: $KEY_CONFIG"
#       echo "The correct version should have a comment that says: easy-rsa version 2.x";
#       exit 1;
#   fi

    # Build root CA
    if [ $DO_ROOT -eq 1 ]; then

        if [ ! -r "${CA_KEY_CONFIG}" ] ; then
            die "No valid, readable ca config file found..."
        fi

        echo "Checking cert dirs..."

        [ -d "${KEY_DIR}"         ] || mkdir $KEY_DIR
        [ -d "${PRIVATE_KEY_DIR}" ] || mkdir $PRIVATE_KEY_DIR
        [ -d "${REQ_DIR}"         ] || mkdir $REQ_DIR

        echo "Initializing index, serial, and crlnumber..."

        cat /dev/null > ${SSLROOT}/index.txt
        echo 01 > ${SSLROOT}/serial
        echo 01 > ${SSLROOT}/crlnumber

        [ -n "${DEBUG}" ] && echo \
        $OPENSSL req -extensions v3_ca $BATCH -days $CA_EXPIRE $NODES_REQ -new -newkey rsa:$KEY_SIZE -$KEY_MD -keyout $_CAKEY -out $_CAREQ -config $CA_KEY_CONFIG 

        $OPENSSL req -extensions v3_ca $BATCH -days $CA_EXPIRE $NODES_REQ -new -newkey rsa:$KEY_SIZE -$KEY_MD -keyout $_CAKEY -out $_CAREQ -config $CA_KEY_CONFIG &&
            chmod 0600 $_CAKEY

        [ -n "${DEBUG}" ] && echo \
        $OPENSSL ca -create_serial -extensions v3_ca -config $CA_KEY_CONFIG -out $_CACERT -days $CA_EXPIRE -keyfile $_CAKEY -selfsign -infiles $_CAREQ

        $OPENSSL ca -create_serial -extensions v3_ca -config $CA_KEY_CONFIG -out $_CACERT -days $CA_EXPIRE -keyfile $_CAKEY -selfsign -infiles $_CAREQ

        # generate a new CRL -- try to be compatible with
        # intermediate PKIs

        echo "Initializing CRL cert..."

        [ -n "${DEBUG}" ] && echo \
        $OPENSSL ca -extensions crl_ext -gencrl -out $_CRLCERT -config $CA_KEY_CONFIG 

        $OPENSSL ca -extensions crl_ext -gencrl -out $_CRLCERT -config $CA_KEY_CONFIG 

    elif [ $CA_DER -eq 1 ] ; then

        [ -n "${DEBUG}" ] && echo \
        $OPENSSL x509 -in $_CACERT -outform DER -out ${_CACERT}.der

        $OPENSSL x509 -in $_CACERT -outform DER -out ${_CACERT}.der

    else        
        # Make sure CA key/cert is available
        if [ $DO_CA -eq 1 ] || [ $DO_P12 -eq 1 ]; then
            if [ ! -r "${_CACERT}" ] || [ ! -r "${_CAKEY}" ]; then
                echo "$PROGNAME: Need a readable ${_CACERT} and ${_CAKEY} in $SSLROOT"
                echo "Try $PROGNAME --initca to build a root certificate/key."
                exit 1
            fi
        fi

        # Generate key for PKCS#11 token
        PKCS11_ARGS=
        if [ $DO_P11 -eq 1 ]; then
                echo skipping p11

#               stty -echo
#               echo -n "User PIN: "
#               read -r PKCS11_PIN
#               stty echo
#               export PKCS11_PIN


#               echo "Generating key pair on PKCS#11 token..."
#               $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --keypairgen \
#                       --login --pin "$PKCS11_PIN" \
#                       --key-type rsa:1024 \
#                       --slot "$PKCS11_SLOT" --id "$PKCS11_ID" --label "$PKCS11_LABEL" || exit 1
#               PKCS11_ARGS="-engine pkcs11 -keyform engine -key $PKCS11_SLOT:$PKCS11_ID"
        fi


        if [ ! -x "/usr/bin/stty" ] ; then
            echo "Must install the coreutils-stty package..."
            exit 1
        fi


        # Build cert/key
        ( [ $DO_REQ -eq 0                  ] || echo DEBUG DO_REQ: $OPENSSL req $BATCH -config $KEY_CONFIG -days $KEY_EXPIRE $NODES_REQ -new -newkey rsa:$KEY_SIZE -keyout $PRIVATE_KEY_FILE -out $CERTIFICATE_REQ_FILE $REQ_EXT $PKCS11_ARGS ) &&
        ( [ $DO_CA  -eq 0                  ] || echo DEBUG DO_CA:  $OPENSSL ca  $BATCH -config $KEY_CONFIG -days $KEY_EXPIRE -out $CERTIFICATE_FILE -in $CERTIFICATE_REQ_FILE $CA_EXT -md $KEY_MD ) &&
        ( [ $DO_P12 -eq 0                  ] || echo DEBUG DO_P12: $OPENSSL pkcs12 -config $KEY_CONFIG -export -inkey $PRIVATE_KEY_FILE -in $CERTIFICATE_FILE -certfile $_CACERT -out ${PRIVATE_KEY_DIR}/$FN.p12 $NODES_P12 )


        # Build cert/key
        ( [ $DO_REQ -eq 0                  ] || $OPENSSL req $BATCH -config $KEY_CONFIG -days $KEY_EXPIRE $NODES_REQ -new -newkey rsa:$KEY_SIZE -keyout $PRIVATE_KEY_FILE -out $CERTIFICATE_REQ_FILE $REQ_EXT $PKCS11_ARGS ) &&
        ( [ $DO_CA  -eq 0                  ] || $OPENSSL ca  $BATCH -config $KEY_CONFIG -days $KEY_EXPIRE -out $CERTIFICATE_FILE -in $CERTIFICATE_REQ_FILE $CA_EXT -md $KEY_MD ) &&
        ( [ $DO_P12 -eq 0                  ] || $OPENSSL pkcs12 -config $KEY_CONFIG -export -inkey ${PRIVATE_KEY_DIR}/$FN.key -in ${KEY_DIR}/$FN.crt -certfile $_CACERT -out ${PRIVATE_KEY_DIR}/$FN.p12 $NODES_P12 ) &&
        ( [ $DO_CA  -eq 0 -o $DO_P11 -eq 1 ] || chmod 0600 $PRIVATE_KEY_FILE ) &&
        ( [ $DO_P12 -eq 0                  ] || chmod 0600 ${PRIVATE_KEY_DIR}/$FN.p12 )

        # Load certificate into PKCS#11 token
        if [ $DO_P11 -eq 1 ]; then
                echo skipping p11

#               $OPENSSL x509 -in "$FN.crt" -inform PEM -out "$FN.crt.der" -outform DER && \
#                 $PKCS11TOOL --module "$PKCS11_MODULE_PATH" --write-object "$FN.crt.der" --type cert \
#                       --login --pin "$PKCS11_PIN" \
#                       --slot "$PKCS11_SLOT" --id "$PKCS11_ID" --label "$PKCS11_LABEL" 
#               [ -e "$FN.crt.der" ]; rm "$FN.crt.der"
        fi

    fi

# Need definitions
else
    need_vars
fi
